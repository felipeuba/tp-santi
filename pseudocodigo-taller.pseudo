Public class Ciudad{

    int ganancia;
    int perdida;
    int balance;
    // int id;

    public Ciudad(){
        this.ganancia = 0;
        this.perdida = 0;
        this.balance = 0;

    }
}

InfoTraslado struct <
id: N, 
origen: N, 
destino: N, 
gananciaNeta: N, 
timestamp: N
>

Módulo BestEffort 
implementa … {
var mayorSuperavit : Heap <Arr<Ciudad>, Balance>, // params = arr, comparable
var mayorGanancia : <ArrayList<N>>,  
var mayorPerdida  : <ArrayList<N>>, // preguntar en clase sobre tipo de datos
var ciudades : <Array<Ciudad>>,
var trasladosMasAntiguos : Heap <ArrayList<Traslado>, Antiguedad>,
var trasladosMasRedituables : Heap <ArrayList<Traslado>, gananciaNeta>,
var gananciaTotal : (N,N) // (suma total, cantidad de traslados)


    public nuevoSistema (in cantCiudades: N, in traslados: seq<InfoTraslado>): BestEffort { //O(|cantCiudades| + |traslados|)
        res := new BestEffort;
        res.ciudades = new Array<Ciudad>[cantCiudades];
        i := 0;
        while (i < cantCiudades ) { //O(|cantCiudades|)
            nuevaCiudad = new Ciudad();
            res.ciudades[i] = nuevaCiudad;
            //res.ciudades[i].id = i;
            i ++ ;
        }
        res.mayorGanancia = new ArrayList[cantCiudades]; // nuevo arr tamaño 1
        res.mayorGanancia = res.ciudades;
        res.mayorPerdida = new ArrayList[cantCiudades];
        res.mayorPerdida = res.ciudades;
        res.gananciaTotal = (0,0);

        //preguntar si de esta forma se actualizan bien las ciudades

                
        // creo heaps. primer param el arreglo que recibe y el segundo el comparable
        res.mayorSuperavit = new Heap(res.ciudades, balance); //O(|ciudades|)

        //preguntar si creamos una clase maxHeap y otra minHeap o si Heap recibe un parametro

        res.trasladosMasAntiguos = new Heap(arrTraslados, timestamp, min); //O(|traslados|)
        res.trasladosMasRedituables = new Heap(arrTraslados, ganancia, max); //O(|traslados|)

        return res;
    }

        private void actualizarCiudades(in ciudades: seq<N>, in traslados: seq<InfoTraslado>){
            j := 0;
            nuevoArreglo = []
            while (j < traslados.length()) { //O(|traslados|)
                res.gananciaTotal[0] = res.gananciaTotal[0] + traslados[j].ganancia;
                res.gananciaTotal[1] += 1;
                
                res.ciudades[traslados[j].origen].ganancia += traslados[j].gananciaNeta ;
                res.ciudades[traslados[j].destino].perdida += traslados[j].gananciaNeta ;
                
                res.ciudades[traslados[j].origen].balance += traslados[j].gananciaNeta;
                res.ciudades[traslados[j].destino].balance -= traslados[j].gananciaNeta ;
            
                if (res.mayorGanancia[0] < ciudades[traslados[j].origen].ganancia) {
                    res.mayorGanancia = [ciudades[traslados[j].origen].ganancia] 
                }
                else if (res.mayorGanancia[0] == ciudades[traslados[j].origen].ganancia) {
                    res.mayorGanancia ++ [ciudades[traslados[j].origen].ganancia]
                }
    
                if (res.mayorPerdida[0] < ciudades[traslados[j].origen].perdida) {//devuelve la parte entera de la ganancia promedio por t
                    res.mayorPerdida = [ciudades[traslados[j].origen].perdida] 
                }
                else if (res.mayorPerdida[0] == ciudades[traslados[j].origen].perdida) {
                    res.mayorPerdida ++ [ciudades[traslados[j].origen].perdida]
                }

                res.ciudades[traslados[j].origen].balance += traslados[j].gananciaNeta ;
                res.ciudades[traslados[j].destino].balamce -= traslados[j].gananciaNeta ;
    
                nuevoArreglo += res.ciudades[traslados[j].origen];
                nuevoArreglo += res.ciudades[traslados[j].destino];

                j++;
            }
            
            this.mayorSuperavit.actualizar(nuevoArreglo);
        }

    private void registrarTraslados(Arr(Traslado) traslados){
        this.trasladosMasAntiguos.agregar(traslados);
        this.trasladosMasRedituables.agregar(traslados);
    }

    private Arr(int) despacharMasRedituables(int n){
        i=0
        res = []
        if n > trasladosMasRedituables.length{
            while i < trasladosMasRedituables.length
                res ++ trasladosMasRedituables[0]
                this.trasladosMasRedituables.eliminar();
                i ++
        
        }else{
            while i < N
            res ++ trasladosMasRedituables[0]
            this.trasladosMasRedituables.eliminar();
            i ++
        }

        



        actualizarCiudades(this.ciudades[], res)

        while j < res.length

            this.mayorSuperavit = heapify(res[j].destino, balance);
            this.mayorSuperavit = heapify(res[j].origen, balance);

        this.trasladosMasAntiguos.eliminarConIds(res);                
        return res;
    }

    private Arr(int) despacharMasAntiguos(int n){
        i=0
        res = []
        if n > trasladosMasAntiguos.length{
            while i < trasladosMasAntiguos.length
                res ++ trasladosMasAntiguos[0]
                this.trasladosMasAntiguos.eliminar();
                i ++
        
        }else{
            while i < N
            res ++ trasladosMasAntiguos[0]
            this.trasladosMasAntiguos.eliminar();
            i ++
        }

        actualizarCiudades(this.ciudades, res)

        this.trasladosMasRedituables.eliminarConIds(res);                
        return res;
    }
    //etc

    end
    //creo que no usaremos Comparable, porque siempre tratamos con int (?)
class Heap<T extends Comparable<T>> {
    private ArrayList<T> maxHeap;
    //clave:id, valor:  
    private dict<Integer, Integer> positionMap;
    private Comparable valorAComparar;

    public Heap(ArrayList arr, Comparable comparable){
        this.valorAComparar = comparable;
        this.maxHeap = floydInsert(arr);
    }

    private void floydInsert(ArrayList arr){
        for(int i = arr.length/2 -1; i >= 0; i--){
            heapify(i, arr);
        }
        this.maxHeap = arr;
    }

    private void heapify(int i, ArrayList arr){
        int largest = i;
        int left = 2i + 1;
        int right = 2i + 2;

        if (left < arr.length && arr[left].valorAComparar > arr[largest].valorAComparar){
            largest = left
        }
        if (right < arr.length && arr[right].valorAComparar > arr[largest].valorAComparar){
            largest = right
        }
        //if (right < arr.length && arr[right].valorAComparar == arr[largest].valorAComparar){
        //    if(arr[rigth].id < arr[largest].id){
        //        largest = right
        //   }
        //}
        if (largest != i){
            swap(i, largest)
            heapify(largest, arr);
        }
    }

    private void heapifyUp(int i){
        int padre = (i - 1) / 2;

        while(i > 0 && this.maxHeap[i] > padre){
            swap(i, padre, this.maxHeap);
            i = padre;
            padre = (i - 1) / 2;
        }
    }

    private void agregar(traslados Arr<Traslados>){
        for (i = 0; i < traslados.size(), i++){
            this.maxHeap.add(traslados[i]);
            heapifyUp(this.maxHeap.size()-1);
        }
    }

    private void eliminar(){
        swap(0, this.maxHeap.size()-1, this.maxHeap);
        this.maxHeap.remove(this.maxHeap.size()-1);
        heapify(0, this.maxHeap);
    }

    //eliminarConIds(this.trasladosMasAntiguos, res)

    private void eliminarConIds(Arr<Int> arrIds){
        int i = 0;
        while i < arrIds {
            this.maxHeap.swap(this.maxHeap.size()-1, this.maxHeap.positionMap.get(arrIds[i].id));
            this.maxHeap.remove(this.maxHeap.size()- 1);
            heapify(this.maxHeap.positionMap.get(arrIds[i].id), this.maxHeap);
        }
    }

    private void swap(int i, int j, arr) {
        //revisar para no hacer aliasing
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        positionMap.add(arr[i].id, arr[i]);
        positionMap.add(arr[j].id, arr[j]);
    }
}
end

crear clases de Ciudad, Traslado, Comparable (?)

    public List<Integer> ciudadesConMayorGanancia() {
        return new ArrayList<>(this.mayorGanancia);

    }
    public List<Integer> ciudadesConMayorPerdida() { 
        return new ArrayList<>(this.mayorPerdida);
    }

        public int ciudadConMayorSuperavit() {
            return this.mayorSuperavit.maxHeap.get(0).id;
        }
